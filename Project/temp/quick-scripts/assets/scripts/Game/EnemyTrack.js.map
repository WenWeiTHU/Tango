{"version":3,"sources":["EnemyTrack.js"],"names":["cc","Class","extends","require","properties","Player","type","Node","default","maxSpeed","iniAccel","onLoad","director","getCollisionManager","enabled","speedX","speedY","updatePos","dt","dir","v2","x","node","y","distance","mag","Math","sqrt","pow","update","rotate"],"mappings":";;;;;;AAAA;;;;AAIAA,GAAGC,KAAH,CAAS;AACLC,aAASC,QAAQ,OAAR,CADJ;;AAGLC,gBAAY;AACRC,gBAAQ;AACJC,kBAAMN,GAAGO,IADL;AAEJC,qBAAS;AAFL,SADA;AAKRC,kBAAU,GALF;AAMRC,kBAAU;AANF,KAHP;;AAYL;;;;AAIAC,UAhBK,oBAgBK;AACN;AACAX,WAAGY,QAAH,CAAYC,mBAAZ,GAAkCC,OAAlC,GAA4C,IAA5C;;AAEA;AACA,aAAKC,MAAL,GAAc,CAAd;AACA,aAAKC,MAAL,GAAc,CAAd;AACH,KAvBI;;;AAyBL;;;;AAIAC,aA7BK,qBA6BMC,EA7BN,EA6BU;AACX;AACA,aAAKC,GAAL,GAAWnB,GAAGoB,EAAH,CAAM,KAAKf,MAAL,CAAYgB,CAAZ,GAAgB,KAAKC,IAAL,CAAUD,CAAhC,EAAmC,KAAKhB,MAAL,CAAYkB,CAAZ,GAAgB,KAAKD,IAAL,CAAUC,CAA7D,CAAX;;AAEA,aAAKC,QAAL,GAAgB,KAAKL,GAAL,CAASM,GAAT,EAAhB;;AAEA;AACA,YAAGC,KAAKC,IAAL,CAAUD,KAAKE,GAAL,CAAS,KAAKb,MAAd,EAAsB,CAAtB,IAA0BW,KAAKE,GAAL,CAAS,KAAKZ,MAAd,EAAsB,CAAtB,CAApC,IAAgE,KAAKP,QAAxE,EAAiF;AAC7E,iBAAKM,MAAL,IAAe,KAAKL,QAAL,GAAgBQ,EAA/B;AACA,iBAAKF,MAAL,IAAe,KAAKN,QAAL,GAAgBQ,EAA/B;AACH;;AAED;AACA,aAAKI,IAAL,CAAUD,CAAV,IAAe,KAAKN,MAAL,GAAc,KAAKI,GAAL,CAASE,CAAvB,GAA2B,KAAKG,QAA/C;AACA,aAAKF,IAAL,CAAUC,CAAV,IAAe,KAAKP,MAAL,GAAc,KAAKG,GAAL,CAASI,CAAvB,GAA2B,KAAKC,QAA/C;AACH,KA5CI;AA8CLK,UA9CK,kBA8CEX,EA9CF,EA8CM;AACP,aAAKY,MAAL;AACA,aAAKb,SAAL,CAAeC,EAAf;AACH;AAjDI,CAAT","file":"EnemyTrack.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\Game","sourcesContent":["/*\n * 追踪敌人函数\n */\n\ncc.Class({\n    extends: require(\"Enemy\"),\n\n    properties: {\n        Player: {\n            type: cc.Node,\n            default: null,\n        },\n        maxSpeed: 400,\n        iniAccel: 0.01,\n    },\n\n    /*\n     * 初始化函数\n     * 功能：初始化脚本所需的设定\n     */\n    onLoad () {\n        // 开启碰撞检测\n        cc.director.getCollisionManager().enabled = true;\n\n        // 设置初速度为0\n        this.speedX = 0\n        this.speedY = 0\n    },\n\n    /*\n     * 更新位置函数\n     * 功能：计算出对象与主角的方向，然后更新对象的速度和位置\n     */\n    updatePos (dt) {\n        // 计算对象和主角的位移向量\n        this.dir = cc.v2(this.Player.x - this.node.x, this.Player.y - this.node.y)\n\n        this.distance = this.dir.mag()\n\n        // 如果速度未达到上限，则继续加速\n        if(Math.sqrt(Math.pow(this.speedX, 2)+ Math.pow(this.speedY, 2)) < this.maxSpeed){\n            this.speedX += this.iniAccel * dt\n            this.speedY += this.iniAccel * dt\n        }\n        \n        // 更新位置\n        this.node.x += this.speedX * this.dir.x / this.distance\n        this.node.y += this.speedY * this.dir.y / this.distance\n    },\n\n    update(dt) {\n        this.rotate()\n        this.updatePos(dt)\n    },\n});"]}